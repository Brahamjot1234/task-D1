const int IR_Pin = 2;      // Pin for the IR sensor
const int Button_Pin = 3;  // Pin for the button
const int Trig_Pin = 6;    // Pin for the ultrasonic sensor trigger
const int Echo_Pin = 7;    // Pin for the ultrasonic sensor echo
const int PCINT_Pin = 4;   // Pin for the Pin Change Interrupt

volatile bool movementDetected = false;
volatile bool interrupted = false;
volatile bool distanceChecked = false;
volatile int cycleCount = 0;

void setup() {
  pinMode(IR_Pin, INPUT);
  pinMode(Button_Pin, INPUT_PULLUP);
  pinMode(Trig_Pin, OUTPUT);
  pinMode(Echo_Pin, INPUT);
  
  pinMode(9, OUTPUT);  // LED1
  pinMode(5, OUTPUT);  // LED2
  pinMode(11, OUTPUT); // LED3

  Serial.begin(9600);

  // Attach interrupt for the button press
  attachInterrupt(digitalPinToInterrupt(Button_Pin), handleButtonInterrupt, FALLING);
  
  // Attach Pin Change Interrupt for the IR sensor
  attachPCInterrupt(PCINT_Pin, handleIRInterrupt);

  // Setup timer
  setupTimer();
}

void loop() {
  // Measure distance using ultrasonic sensor
  long distance = measureDistance();

  // Read flex sensor value
  int flexValue = analogRead(A0);

  // Check for different conditions
  if (movementDetected) {
    handleMovement();
  } else if (interrupted) {
    handleInterrupt(flexValue);
  } else if (distanceChecked) {
    handleDistance(distance);
  } else {
    handleNoMovement();
  }

  delay(1000);
}

// Function to handle movement detection
void handleMovement() {
  Serial.println("Movement detected");
  digitalWrite(9, HIGH); // Turn on LED1
  digitalWrite(5, LOW);  // Turn off LED2
  delay(2000);
  movementDetected = false;
}

// Function to handle interruption
void handleInterrupt(int flexValue) {
  Serial.println("Interrupted");
  Serial.print("The value is: ");
  Serial.println(flexValue);
  delay(2000);
  interrupted = false;
}

// Function to handle distance checking
void handleDistance(long distance) {
  Serial.print("The present distance is: ");
  Serial.print(distance);
  Serial.println(" cm");
  delay(1000);
  distanceChecked = false;
}

// Function to handle no movement
void handleNoMovement() {
  Serial.println("No movement");
  digitalWrite(5, HIGH); // Turn off LED2
  digitalWrite(9, LOW);  // Turn off LED1
}

// Interrupt service routine for button press
void handleButtonInterrupt() {
  interrupted = true;
}

// Interrupt service routine for IR sensor
void handleIRInterrupt() {
  movementDetected = digitalRead(IR_Pin);
}

// Setup timer
void setupTimer() {
  cli();
  TCCR1A = 0;
  TCCR1B = 0;
  TCNT1 = 0; 
  OCR1A = 15624;
  TCCR1B |= (1 << WGM12) | (1 << CS12) | (1 << CS10);
  TIMSK1 |= (1 << OCIE1A);
  sei();
}

// Attach Pin Change Interrupt
void attachPCInterrupt(int pin, void (*handler)()) {
  int pcInt = digitalPinToPCICRbit(pin);
  PCICR |= (1 << pcInt);
  
  int pcIntNum = digitalPinToPCMSKbit(pin);
  PCMSK(pcIntNum) |= bit (digitalPinToPCMSKbit(pin));
}

// Timer interrupt service routine
ISR(TIMER1_COMPA_vect) {
  cycleCount++;
  if (cycleCount == 5) {
    digitalWrite(11, HIGH); // Turn on LED3
    delay(1000); 
    digitalWrite(11, LOW);  // Turn off LED3
    cycleCount = 0; 
  }
}
